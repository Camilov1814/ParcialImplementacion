services:
  # PostgreSQL Database (same as production)
  postgres:
    image: postgres:15-alpine
    container_name: devops-chaos-db-dev
    environment:
      POSTGRES_DB: devops_chaos_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: devpass123
    ports:
      - "5433:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - devops-chaos-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Service (development)
  backend:
    build:
      context: ./devops-chaos-backend
      dockerfile: Dockerfile
    container_name: devops-chaos-backend-dev
    environment:
      - DATABASE_URL=postgres://postgres:devpass123@postgres:5432/devops_chaos_dev?sslmode=disable
      - JWT_SECRET=dev_jwt_secret_key
      - GIN_MODE=debug
      - PORT=8080
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - devops-chaos-dev-network
    restart: unless-stopped
    volumes:
      - ./devops-chaos-backend:/app
    command: ["go", "run", "./cmd/main.go"]

  # Frontend Service (development with hot reload)
  frontend:
    image: node:20-alpine
    container_name: devops-chaos-frontend-dev
    working_dir: /app
    ports:
      - "5173:5173"
    volumes:
      - ./devops-chaos-frontend:/app
      - /app/node_modules
    networks:
      - devops-chaos-dev-network
    environment:
      - VITE_API_URL=http://localhost:8081
    command: ["npm", "run", "dev", "--", "--host"]
    depends_on:
      - backend

volumes:
  postgres_dev_data:

networks:
  devops-chaos-dev-network:
    driver: bridge